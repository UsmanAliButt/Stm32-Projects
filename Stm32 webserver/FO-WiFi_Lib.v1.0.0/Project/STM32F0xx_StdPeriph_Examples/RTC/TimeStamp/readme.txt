/**
  @page RTC_TimeStamp RTC Time Stamp example
  
  @verbatim
  ******************** (C) COPYRIGHT 2012 STMicroelectronics *******************
  * @file    RTC/TimeStamp/readme.txt 
  * @author  MCD Application Team
  * @version V1.0.0
  * @date    18-May-2012
  * @brief   Description of the RTC Time Stamp example.
  ******************************************************************************
  *
  * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  * You may not use this file except in compliance with the License.
  * You may obtain a copy of the License at:
  *
  *        http://www.st.com/software_license_agreement_liberty_v2
  *
  * Unless required by applicable law or agreed to in writing, software 
  * distributed under the License is distributed on an "AS IS" BASIS, 
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *
  ******************************************************************************
   @endverbatim

@par Example Description 

This example provides a short description of how to use the RTC peripheral and 
the Time Stamp feature.

One from the following clock can be used as RTC clock source (uncomment the
corresponding define in main.c):
  - LSE oscillator clock usually delivered by a 32.768 kHz quartz.
  - LSI oscillator clock

The program behaves as follows:

1. After startup the program checks the backup data register 0 value:
    - BKP_DR0 value not correct: (RTC_BKP_DR0 value is not correct or has not yet
      been programmed when the program is executed for the first time) the RTC is
      configured and the user is asked to set the time and date (entered on 
      HyperTerminal).
    
    - BKP_DR0 value correct: this means that the RTC is configured and the time
      date and timestamp (time and date) are displayed on HyperTerminal.

2. When an External Reset occurs the BKP domain is not reset and the RTC configuration
   is not lost.

3. When power on reset occurs:
    - If a battery is connected to the VBAT pin: the BKP domain is not reset and
      the RTC configuration is not lost.
      
    - If no battery is connected to the VBAT pin: the BKP domain is reset and the
      RTC configuration is lost.

4. It configures the RTC_AF1 pin TimeStamp to be falling edge and enables the
TimeStamp detection.

5. On applying a low level on the RTC_AF1 pin (PC.13), the calendar is saved in 
the time-stamp registers thanks to the timestamp event detection.
   
The example uses HyperTerminal to configure the RTC clock, display the current 
time and timestamp registers contents:
 - pressing Tamper button, the current time and date are saved in RTC TSTR
   and TSDR registers.
 - When pressing Joystick SEL button, the TimeStamp Calendar is cleared.
 - When pressing Key button, the current RTC Calendar (Time and date) and
   RTC TimeStamp Calendar (Time and date) are displayed.


@par Directory contents 

  - RTC/TimeStamp/stm32f0xx_conf.h    Library Configuration file
  - RTC/TimeStamp/stm32f0xx_it.c      Interrupt handlers
  - RTC/TimeStamp/stm32f0xx_it.h      Interrupt handlers header file
  - RTC/TimeStamp/main.c              Main program
  - RTC/TimeStamp/main.h              Main program header file
  - RTC/TimeStamp/system_stm32f0xx.c  STM32F0xx system source file
  
@note The "system_stm32f0xx.c" is generated by an automatic clock configuration 
      tool and can be easily customized to meet user application requirements. 
      To select different clock setup, use the "STM32F0xx_Clock_Configuration_VX.Y.Z.xls" 
      provided with the AN4055 package available on <a href="http://www.st.com/internet/mcu/class/1734.jsp">  ST Microcontrollers </a>

         
@par Hardware and Software environment

  - This example runs on STM32F0xx Devices.
  
  - This example has been tested with STMicroelectronics STM320518-EVAL (STM32F0xx)
    evaluation board and can be easily tailored to any other supported device 
    and development board.

  - STM320518-EVAL Set-up
    - Use Tamper, Key and Joystick SEL buttons
    - Connect a null-modem female/female RS232 cable between the DB9 connector 
      CN7 (USART1) and PC serial port to display data on the HyperTerminal.

    - Hyperterminal configuration:
      - Word Length = 8 Bits
      - One Stop Bit
      - No parity
      - BaudRate = 115200 baud
      - flow control: None


@par How to use it ? 

In order to make the program work, you must do the following :
 - Copy all source files from this example folder to the template folder under
   Project\STM32F0xx_StdPeriph_Templates
 - Open your preferred toolchain 
 - Rebuild all files and load your image into target memory
 - Run the example

 * <h3><center>&copy; COPYRIGHT STMicroelectronics</center></h3>
 */
